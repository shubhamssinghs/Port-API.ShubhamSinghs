name: Deploy to Dev

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - develop

jobs:
  deploy_to_dev:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create environment file
        run: |
          echo "NODE_ENV=${{ vars.NODE_DEV_ENV }}" >> .env
          echo "SERVER_HOST=${{ vars.NODE_DEV_SERVER_HOST }}" >> .env
          echo "SERVER_PORT=${{ vars.NODE_DEV_SERVER_PORT }}" >> .env

          echo "ACCESS_TOKEN_SECRET=${{ vars.NODE_DEV_ACCESS_TOKEN_SECRET }}" >> .env
          echo "REFRESH_TOKEN_SECRET=${{ vars.NODE_DEV_REFRESH_TOKEN_SECRET }}" >> .env
          echo "EMAIL_VERIFICATION_SECRET=${{ vars.NODE_DEV_EMAIL_VERIFICATION_SECRET }}" >> .env

          echo "ACCESS_TOKEN_EXPIRY=${{ vars.NODE_DEV_ACCESS_TOKEN_EXPIRY }}" >> .env
          echo "REFRESH_TOKEN_EXPIRY=${{ vars.NODE_DEV_REFRESH_TOKEN_EXPIRY }}" >> .env

          echo "SMTP_USERNAME=${{ vars.NODE_DEV_SMTP_USERNAME }}" >> .env 
          echo "SMTP_PASSWORD=${{ vars.NODE_DEV_SMTP_PASSWORD }}" >> .env
          echo "SMTP_HOST=${{ vars.NODE_DEV_SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ vars.NODE_DEV_SMTP_PORT }}" >> .env
          echo "SMTP_SSL=${{ vars.NODE_DEV_SMTP_SSL }}" >> .env
          echo "SMTP_SENDER_NAME=${{ vars.NODE_DEV_SMTP_SENDER_NAME }}" >> .env
          echo "SMTP_FROM_MAIL${{ vars.NODE_DEV_SMTP_FROM_MAIL }}=" >> .env

          echo "DB_HOST=${{ vars.NODE_DEV_DB_HOST }}" >> .env
          echo "DB_PORT=${{ vars.NODE_DEV_DB_PORT }}" >> .env
          echo "DB_USERNAME=${{ vars.NODE_DEV_DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ vars.NODE_DEV_DB_PASSWORD }}" >> .env
          echo "DB_DATABASE=${{ vars.NODE_DEV_DB_DATABASE }}" >> .env

          echo "CORS_ALLOWED_ORIGINS=${{ vars.NODE_DEV_CORS_ALLOWED_ORIGINS }}" >> .env
          echo "LOG_LEVEL=database" >> .env
          echo "LOG_TIME_ZONE=Asia/Kolkata" >> .env

      - name: Create Docker file
        run: |
          echo "FROM node:${{ vars.NODE_DEV_NODE_VERSION }}" >> Dockerfile
          echo "WORKDIR /usr/src/app" >> Dockerfile
          echo "COPY package*.json ./" >> Dockerfile
          echo "RUN npm ci" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "EXPOSE ${{ vars.NODE_DEV_SERVER_PORT }}" >> Dockerfile
          echo 'CMD ["npm", "start"]' >> Dockerfile

      - name: Build Docker image for Development
        run: |
          docker build -f ./Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.NODE_DEV_DOCKER_IMAGE_NAME }}:latest .

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ vars.NODE_DEV_DOCKER_IMAGE_NAME }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ vars.NODE_DEV_DOCKER_IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.NODE_DEV_DOCKER_IMAGE_NAME }}:latest

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          password: ${{ secrets.DEPLOY_SERVER_PASSWORD }}
          port: ${{ secrets.DEPLOY_SERVER_PORT }}

          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.NODE_DEV_DOCKER_IMAGE_NAME }}
            docker stop ${{ vars.NODE_DEV_DOCKER_IMAGE_NAME }} || true
            docker rm ${{ vars.NODE_DEV_DOCKER_IMAGE_NAME }} || true
            docker run -d --name ${{ vars.NODE_DEV_DOCKER_IMAGE_NAME }} -p ${{ vars.NODE_DEV_SERVER_PORT }}:${{ vars.NODE_DEV_SERVER_PORT }} ${{ secrets.DOCKER_USERNAME }}/${{ vars.NODE_DEV_DOCKER_IMAGE_NAME }}
