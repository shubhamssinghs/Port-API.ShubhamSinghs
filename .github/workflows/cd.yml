name: Continuous Deployment (CD)

env:
  NODE_VERSION: '21'

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy_to_dev:
    runs-on: ubuntu-latest
    environment: DEV
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Create Dockerfile
        run: |
          echo "FROM node:${{ vars.DOCKER_NODE_VERSION }}" >> Dockerfile
          echo "WORKDIR /usr/src/app" >> Dockerfile
          echo "COPY package*.json ./" >> Dockerfile
          echo "RUN npm ci" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "EXPOSE ${{ vars.SERVER_PORT }}" >> Dockerfile
          echo 'CMD ["npm", "start"]' >> Dockerfile

      - name: Build Docker image for Development
        run: |
          docker build -f ./Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }} .

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}

      - name: Deploy to Development Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          password: ${{ secrets.DEPLOY_SERVER_PASSWORD }}
          port: ${{ secrets.DEPLOY_SERVER_PORT }}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker-compose

            echo "ENV=${{ vars.ENV }}" >> .env
            echo "APP_URL=${{ vars.APP_URL }}" >> .env
            echo "APP_NAME=${{ vars.APP_NAME }}" >> .env
            echo "SERVER_HOST=${{ vars.SERVER_HOST }}" >> .env
            echo "SERVER_PORT=${{ vars.SERVER_PORT }}" >> .env
            echo "ACCESS_TOKEN_SECRET=${{ vars.ACCESS_TOKEN_SECRET }}" >> .env
            echo "REFRESH_TOKEN_SECRET=${{ vars.REFRESH_TOKEN_SECRET }}" >> .env
            echo "EMAIL_VERIFICATION_SECRET=${{ vars.EMAIL_VERIFICATION_SECRET }}" >> .env
            echo "ACCESS_TOKEN_EXPIRY=${{ vars.ACCESS_TOKEN_EXPIRY }}" >> .env
            echo "REFRESH_TOKEN_EXPIRY=${{ vars.REFRESH_TOKEN_EXPIRY }}" >> .env
            echo "EMAIL_VERIFICATION_TOKEN_EXPIRY=${{ vars.EMAIL_VERIFICATION_TOKEN_EXPIRY }}" >> .env
            echo "SMTP_USERNAME=${{ vars.SMTP_USERNAME }}" >> .env 
            echo "SMTP_PASSWORD=${{ vars.SMTP_PASSWORD }}" >> .env
            echo "SMTP_HOST=${{ vars.SMTP_HOST }}" >> .env
            echo "SMTP_PORT=${{ vars.SMTP_PORT }}" >> .env
            echo "SMTP_SSL=${{ vars.SMTP_SSL }}" >> .env
            echo "SMTP_SENDER_NAME=${{ vars.SMTP_SENDER_NAME }}" >> .env
            echo "SMTP_FROM_MAIL=${{ vars.SMTP_FROM_MAIL }}" >> .env
            echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
            echo "DB_USERNAME=${{ vars.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ vars.DB_PASSWORD }}" >> .env
            echo "DB_DATABASE=${{ vars.DB_DATABASE }}" >> .env
            echo "CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}" >> .env
            echo "LOG_LEVEL=database" >> .env
            echo "LOG_TIME_ZONE=Asia/Kolkata" >> .env

            echo "version: '3.8'" > docker-compose.yml
            echo "services:" >> docker-compose.yml
            echo "  app:" >> docker-compose.yml
            echo "    image: ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}" >> docker-compose.yml
            echo "    container_name: ${{ vars.DOCKER_IMAGE_NAME }}" >> docker-compose.yml
            echo "    ports:" >> docker-compose.yml
            echo "      - \"${{ vars.SERVER_PORT }}:${{ vars.SERVER_PORT }}\"" >> docker-compose.yml
            echo "    env_file: .env" >> docker-compose.yml
            echo "    restart: unless-stopped" >> docker-compose.yml

            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml down
            docker-compose -f docker-compose.yml up -d

  deploy_to_prod:
    runs-on: ubuntu-latest
    needs: deploy_to_dev
    environment: DEV
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Dockerfile
        run: |
          echo "FROM node:${{ vars.DOCKER_NODE_VERSION }}" >> Dockerfile
          echo "WORKDIR /usr/src/app" >> Dockerfile
          echo "COPY package*.json ./" >> Dockerfile
          echo "RUN npm ci" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "EXPOSE ${{ vars.SERVER_PORT }}" >> Dockerfile
          echo 'CMD ["npm", "start"]' >> Dockerfile

      - name: Build Docker image for Production
        run: |
          docker build -f ./Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }} .

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          password: ${{ secrets.DEPLOY_SERVER_PASSWORD }}
          port: ${{ secrets.DEPLOY_SERVER_PORT }}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker-compose

            echo "ENV=${{ vars.ENV }}" >> .env
            echo "APP_URL=${{ vars.APP_URL }}" >> .env
            echo "APP_NAME=${{ vars.APP_NAME }}" >> .env
            echo "SERVER_HOST=${{ vars.SERVER_HOST }}" >> .env
            echo "SERVER_PORT=${{ vars.SERVER_PORT }}" >> .env
            echo "ACCESS_TOKEN_SECRET=${{ vars.ACCESS_TOKEN_SECRET }}" >> .env
            echo "REFRESH_TOKEN_SECRET=${{ vars.REFRESH_TOKEN_SECRET }}" >> .env
            echo "EMAIL_VERIFICATION_SECRET=${{ vars.EMAIL_VERIFICATION_SECRET }}" >> .env
            echo "ACCESS_TOKEN_EXPIRY=${{ vars.ACCESS_TOKEN_EXPIRY }}" >> .env
            echo "REFRESH_TOKEN_EXPIRY=${{ vars.REFRESH_TOKEN_EXPIRY }}" >> .env
            echo "EMAIL_VERIFICATION_TOKEN_EXPIRY=${{ vars.EMAIL_VERIFICATION_TOKEN_EXPIRY }}" >> .env
            echo "SMTP_USERNAME=${{ vars.SMTP_USERNAME }}" >> .env 
            echo "SMTP_PASSWORD=${{ vars.SMTP_PASSWORD }}" >> .env
            echo "SMTP_HOST=${{ vars.SMTP_HOST }}" >> .env
            echo "SMTP_PORT=${{ vars.SMTP_PORT }}" >> .env
            echo "SMTP_SSL=${{ vars.SMTP_SSL }}" >> .env
            echo "SMTP_SENDER_NAME=${{ vars.SMTP_SENDER_NAME }}" >> .env
            echo "SMTP_FROM_MAIL=${{ vars.SMTP_FROM_MAIL }}" >> .env
            echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
            echo "DB_USERNAME=${{ vars.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ vars.DB_PASSWORD }}" >> .env
            echo "DB_DATABASE=${{ vars.DB_DATABASE }}" >> .env
            echo "CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}" >> .env
            echo "LOG_LEVEL=database" >> .env
            echo "LOG_TIME_ZONE=Asia/Kolkata" >> .env

            echo "version: '3.8'" > docker-compose.yml
            echo "services:" >> docker-compose.yml
            echo "  app:" >> docker-compose.yml
            echo "    image: ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}" >> docker-compose.yml
            echo "    container_name: ${{ vars.DOCKER_IMAGE_NAME }}" >> docker-compose.yml
            echo "    ports:" >> docker-compose.yml
            echo "      - \"${{ vars.SERVER_PORT }}:${{ vars.SERVER_PORT }}\"" >> docker-compose.yml
            echo "    env_file: .env" >> docker-compose.yml
            echo "    restart: unless-stopped" >> docker-compose.yml

            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml down
            docker-compose -f docker-compose.yml up -d

      - name: Get Release Version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create Git tag
        id: tag
        run: |
          git tag ${{ env.RELEASE_VERSION }}
          git push origin ${{ env.RELEASE_VERSION }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
