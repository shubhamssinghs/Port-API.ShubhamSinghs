name: Continuous Deployment (CD)

env:
  NODE_VERSION: '21'

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy_to_dev:
    runs-on: ubuntu-latest
    environment: DEV
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Create Dockerfile
        run: |
          echo "FROM node:${{ vars.DOCKER_NODE_VERSION }}" >> Dockerfile
          echo "WORKDIR /usr/src/app-dev" >> Dockerfile
          echo "COPY package*.json ./" >> Dockerfile
          echo "RUN npm ci" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "EXPOSE ${{ vars.SERVER_PORT }}" >> Dockerfile
          echo 'CMD ["npm", "start"]' >> Dockerfile

      - name: Build Docker image for Development
        run: |
          docker build -f ./Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:dev .

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:dev ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:dev
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:dev

      - name: Delete Dockerfile
        run: |
          rm Dockerfile

      - name: Deploy to Development Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          password: ${{ secrets.DEPLOY_SERVER_PASSWORD }}
          port: ${{ secrets.DEPLOY_SERVER_PORT }}
          script: |
            echo "ENV=${{ vars.ENV }}" >> .env.dev
            echo "APP_URL=${{ vars.APP_URL }}" >> .env.dev
            echo "APP_NAME=${{ vars.APP_NAME }}" >> .env.dev
            echo "SERVER_HOST=${{ vars.SERVER_HOST }}" >> .env.dev
            echo "SERVER_PORT=${{ vars.SERVER_PORT }}" >> .env.dev
            echo "ACCESS_TOKEN_SECRET=${{ vars.ACCESS_TOKEN_SECRET }}" >> .env.dev
            echo "REFRESH_TOKEN_SECRET=${{ vars.REFRESH_TOKEN_SECRET }}" >> .env.dev
            echo "EMAIL_VERIFICATION_SECRET=${{ vars.EMAIL_VERIFICATION_SECRET }}" >> .env.dev
            echo "ACCESS_TOKEN_EXPIRY=${{ vars.ACCESS_TOKEN_EXPIRY }}" >> .env.dev
            echo "REFRESH_TOKEN_EXPIRY=${{ vars.REFRESH_TOKEN_EXPIRY }}" >> .env.dev
            echo "EMAIL_VERIFICATION_TOKEN_EXPIRY=${{ vars.EMAIL_VERIFICATION_TOKEN_EXPIRY }}" >> .env.dev
            echo "SMTP_USERNAME=${{ vars.SMTP_USERNAME }}" >> .env.dev
            echo "SMTP_PASSWORD=${{ vars.SMTP_PASSWORD }}" >> .env.dev
            echo "SMTP_HOST=${{ vars.SMTP_HOST }}" >> .env.dev
            echo "SMTP_PORT=${{ vars.SMTP_PORT }}" >> .env.dev
            echo "SMTP_SSL=${{ vars.SMTP_SSL }}" >> .env.dev
            echo "SMTP_SENDER_NAME=${{ vars.SMTP_SENDER_NAME }}" >> .env.dev
            echo "SMTP_FROM_MAIL=${{ vars.SMTP_FROM_MAIL }}" >> .env.dev
            echo "DB_HOST=${{ vars.DB_HOST }}" >> .env.dev
            echo "DB_USERNAME=${{ vars.DB_USERNAME }}" >> .env.dev
            echo "DB_PASSWORD=${{ vars.DB_PASSWORD }}" >> .env.dev
            echo "DB_DATABASE=${{ vars.DB_DATABASE }}" >> .env.dev
            echo "CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}" >> .env.dev
            echo "LOG_LEVEL=database" >> .env.dev
            echo "LOG_TIME_ZONE=Asia/Kolkata" >> .env.dev

            docker run -d \
              --name ${{ vars.DOCKER_IMAGE_NAME }}-dev \
              -p ${{ vars.SERVER_PORT }}:${{ vars.SERVER_PORT }} \
              --env-file .env.dev \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:dev
            

  deploy_to_prod:
    runs-on: ubuntu-latest
    needs: deploy_to_dev
    environment: PROD
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Dockerfile
        run: |
          echo "FROM node:${{ vars.DOCKER_NODE_VERSION }}" >> Dockerfile
          echo "WORKDIR /usr/src/app-prod" >> Dockerfile
          echo "COPY package*.json ./" >> Dockerfile
          echo "RUN npm ci" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "EXPOSE ${{ vars.SERVER_PORT }}" >> Dockerfile
          echo 'CMD ["npm", "start"]' >> Dockerfile

      - name: Build Docker image for Production
        run: |
          docker build -f ./Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:prod .

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:prod ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:prod
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:prod

      - name: Delete Dockerfile
        run: |
          rm Dockerfile

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          password: ${{ secrets.DEPLOY_SERVER_PASSWORD }}
          port: ${{ secrets.DEPLOY_SERVER_PORT }}
          script: |
            echo "ENV=${{ vars.ENV }}" >> .env.prod
            echo "APP_URL=${{ vars.APP_URL }}" >> .env.prod
            echo "APP_NAME=${{ vars.APP_NAME }}" >> .env.prod
            echo "SERVER_HOST=${{ vars.SERVER_HOST }}" >> .env.prod
            echo "SERVER_PORT=${{ vars.SERVER_PORT }}" >> .env.prod
            echo "ACCESS_TOKEN_SECRET=${{ vars.ACCESS_TOKEN_SECRET }}" >> .env.prod
            echo "REFRESH_TOKEN_SECRET=${{ vars.REFRESH_TOKEN_SECRET }}" >> .env.prod
            echo "EMAIL_VERIFICATION_SECRET=${{ vars.EMAIL_VERIFICATION_SECRET }}" >> .env.prod
            echo "ACCESS_TOKEN_EXPIRY=${{ vars.ACCESS_TOKEN_EXPIRY }}" >> .env.prod
            echo "REFRESH_TOKEN_EXPIRY=${{ vars.REFRESH_TOKEN_EXPIRY }}" >> .env.prod
            echo "EMAIL_VERIFICATION_TOKEN_EXPIRY=${{ vars.EMAIL_VERIFICATION_TOKEN_EXPIRY }}" >> .env.prod
            echo "SMTP_USERNAME=${{ vars.SMTP_USERNAME }}" >> .env.prod
            echo "SMTP_PASSWORD=${{ vars.SMTP_PASSWORD }}" >> .env.prod
            echo "SMTP_HOST=${{ vars.SMTP_HOST }}" >> .env.prod
            echo "SMTP_PORT=${{ vars.SMTP_PORT }}" >> .env.prod
            echo "SMTP_SSL=${{ vars.SMTP_SSL }}" >> .env.prod
            echo "SMTP_SENDER_NAME=${{ vars.SMTP_SENDER_NAME }}" >> .env.prod
            echo "SMTP_FROM_MAIL=${{ vars.SMTP_FROM_MAIL }}" >> .env.prod
            echo "DB_HOST=${{ vars.DB_HOST }}" >> .env.prod
            echo "DB_USERNAME=${{ vars.DB_USERNAME }}" >> .env.prod
            echo "DB_PASSWORD=${{ vars.DB_PASSWORD }}" >> .env.prod
            echo "DB_DATABASE=${{ vars.DB_DATABASE }}" >> .env.prod
            echo "CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}" >> .env.prod
            echo "LOG_LEVEL=database" >> .env.prod
            echo "LOG_TIME_ZONE=Asia/Kolkata" >> .env.prod

            docker run -d \
              --name ${{ vars.DOCKER_IMAGE_NAME }}-prod \
              -p ${{ vars.SERVER_PORT }}:${{ vars.SERVER_PORT }} \
              --env-file .env.prod \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:prod
            
