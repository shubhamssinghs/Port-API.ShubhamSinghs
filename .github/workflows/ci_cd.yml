name: CI & CD

env:
  NODE_VERSION: '21'

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  test_and_run_sonar_on_code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Create SonarQube configuration file
        run: |
          echo "sonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}" > sonar-project.properties
          echo "sonar.exclusions=**/node_modules/**, **/*.test.ts, **/src/services/ssl.service.ts" >> sonar-project.properties

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

      # - name: Check SonarQube Quality Gate
      #  uses: sonarsource/sonarqube-quality-gate-action@master
      #  timeout-minutes: 5
      #  env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy_to_dev:
    runs-on: ubuntu-latest
    needs: test_and_run_sonar_on_code
    environment: DEV
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Dockerfile
        run: |
          echo "FROM node:${{ vars.DOCKER_NODE_VERSION }}" >> Dockerfile
          echo "WORKDIR /usr/src/app" >> Dockerfile
          echo "COPY package*.json ./" >> Dockerfile
          echo "RUN npm ci" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "EXPOSE ${{ vars.SERVER_PORT }}" >> Dockerfile
          echo 'CMD ["npm", "start"]' >> Dockerfile

      - name: Build Docker image for Development
        run: |
          docker build -f ./Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }} .

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}

      - name: Deploy to Development Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          password: ${{ secrets.DEPLOY_SERVER_PASSWORD }}
          port: ${{ secrets.DEPLOY_SERVER_PORT }}
          script: bash scripts/deploy.script.sh

  deploy_to_prod:
    runs-on: ubuntu-latest
    needs: deploy_to_dev
    environment: PROD
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Dockerfile
        run: |
          echo "FROM node:${{ vars.DOCKER_NODE_VERSION }}" >> Dockerfile
          echo "WORKDIR /usr/src/app" >> Dockerfile
          echo "COPY package*.json ./" >> Dockerfile
          echo "RUN npm ci" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "EXPOSE ${{ vars.SERVER_PORT }}" >> Dockerfile
          echo 'CMD ["npm", "start"]' >> Dockerfile

      - name: Build Docker image for Development
        run: |
          docker build -f ./Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }} .

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}

      - name: Deploy to Development Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          password: ${{ secrets.DEPLOY_SERVER_PASSWORD }}
          port: ${{ secrets.DEPLOY_SERVER_PORT }}
          script: bash scripts/deploy.script.sh
